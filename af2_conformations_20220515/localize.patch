diff --git scripts/predict.py scripts/predict.py
index 7338b21..6bec7a5 100644
--- scripts/predict.py
+++ scripts/predict.py
@@ -3,6 +3,7 @@ import os
 import numpy as np
 import random
 import sys
+import pickle
 
 from alphafold.common import protein
 from alphafold.model import data
@@ -92,7 +93,7 @@ def set_config(
     cfg.data.common.reduce_msa_clusters_by_max_templates = t
     cfg.data.eval.subsample_templates = t
 
-    p = data.get_model_haiku_params(model_name=name, data_dir=".")
+    p = data.get_model_haiku_params(model_name=name, data_dir="/u/xiety/database/alphafold_database")
 
     logging.debug("Prediction parameters:")
     logging.debug("\tModel ID: {}".format(model_id))
@@ -118,7 +119,7 @@ def set_config(
 
 
 def run_one_job(
-    runner: model.RunModel, features_in: dict, random_seed: int, outname: str
+    runner: model.RunModel, features_in: dict, random_seed: int, outprefix: str
 ) -> Mapping[str, Any]:
     r"""Runs one AF2 job with input parameters
 
@@ -127,7 +128,7 @@ def run_one_job(
     runner : AlphaFold2 job runner
     features_in : Input features, including MSA and templates
     random_seed : Random seed
-    outname : Name of PDB file to write
+    outprefix : Directory of PDB file to write
 
     Returns
     ----------
@@ -143,7 +144,13 @@ def run_one_job(
     pred = protein.from_prediction(features, result)
 
     # Write to file
-    to_pdb(outname, pred, result["plddt"], features_in["residue_index"])
+    outpdb = outprefix + ".pdb"
+    to_pdb(outpdb, pred, result["plddt"], features_in["residue_index"])
+
+    # Save the model outputs.
+    result_output_path = outprefix + ".pkl"
+    with open(result_output_path, 'wb') as f:
+      pickle.dump(result, f, protocol=4)
 
     return result
 
@@ -220,7 +227,7 @@ def predict_structure_from_templates(
 
 def predict_structure_no_templates(
     seq: str,
-    outname: str,
+    outdir: str,
     a3m_lines: str,
     model_id: int = -1,
     model_params: int = -1,
@@ -229,6 +236,7 @@ def predict_structure_no_templates(
     max_extra_msa: int = -1,
     max_recycles: int = 3,
     n_struct_module_repeats: int = 8,
+    repeat_index: int = 1
 ) -> NoReturn:
 
     r"""Predicts the structure.
@@ -236,7 +244,7 @@ def predict_structure_no_templates(
     Parameters
     ----------
     seq : Sequence
-    outname : Name of output PDB
+    outdir : Directory of output PDB
     a3m_lines : String of entire alignment
     model_id : Which AF2 model to run (must be 1 or 2 for templates)
     random_seed : Random seed
@@ -274,7 +282,8 @@ def predict_structure_no_templates(
         model_params=model_params,
     )
 
-    result = run_one_job(model_runner, features_in, random_seed, outname)
+    outprefix = os.path.join(outdir, "model"+str(repeat_index)+"_"+str(max_msa_clusters)+'_'+str(max_extra_msa))
+    result = run_one_job(model_runner, features_in, random_seed, outprefix)
 
     del model_runner
 
@@ -303,7 +312,7 @@ def to_pdb(
     with open(outname, "w") as outfile:
         outfile.write(protein.to_pdb(pred))
 
-    with open(f"b_{ outname }", "w") as outfile:
+    with open(f"{ outname }_b", "w") as outfile:
         for line in open(outname, "r").readlines():
             if line[0:6] == "ATOM  ":
                 seq_id = int(line[22:26].strip()) - 1
@@ -314,4 +323,4 @@ def to_pdb(
                     )
                 )
 
-    os.rename(f"b_{ outname }", outname)
+    os.rename(f"{ outname }_b", outname)
